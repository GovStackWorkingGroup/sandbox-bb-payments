version: 2.1
orbs:
  aws-cli: circleci/aws-cli@3.1.4
  aws-ecr: circleci/aws-ecr@8.2.1
  aws-eks: circleci/aws-eks@2.2.0
  helm: circleci/helm@1.0
  kubernetes: circleci/kubernetes@1.3.1
jobs:
  deploy-payment-hub-and-fineract:
    docker:
      - image: cimg/aws:2023.03
    steps:
      - checkout
      - setup_remote_docker:
          version: 20.10.14
      - aws-cli/setup:
          role-arn: 'arn:aws:iam::463471358064:role/CICDPipeline_sandbox-bb-payments_Role_dev'
          aws-region: AWS_DEFAULT_REGION
          profile-name: CICDPipeline_sandbox-bb-payments_Role_dev
          role-session-name: CircleSession
          session-duration: '1800'
      - aws-eks/update-kubeconfig-with-authenticator:
          aws-region: "${AWS_DEFAULT_REGION}"
          cluster-name: "${AWS_CLUSTER_NAME}"
          cluster-authentication-role-arn: arn:aws:iam::463471358064:role/CICDPipeline_sandbox-bb-payments_Role_dev
      - helm/install-helm-client:
          version: v3.2.0
      - run:
          name: Create Elasticsearch Certificates
          command: |
            docker pull docker.elastic.co/elasticsearch/elasticsearch:7.16.3
            docker run --name elastic-helm-charts-certs -i -w /app \
              docker.elastic.co/elasticsearch/elasticsearch:7.16.3 \
              /bin/sh -c " \
                elasticsearch-certutil ca --out /app/elastic-stack-ca.p12 --pass '' && \
                elasticsearch-certutil cert --name security-master --dns security-master --ca /app/elastic-stack-ca.p12 --pass '' --ca-pass '' --out /app/elastic-certificates.p12"
            docker cp elastic-helm-charts-certs:/app/elastic-certificates.p12 ./
            openssl pkcs12 -nodes -passin pass:'' -in elastic-certificates.p12 -out elastic-certificate.pem
            openssl x509 -outform der -in elastic-certificate.pem -out elastic-certificate.crt
            kubectl get namespace | grep -q "^${CHART_NAMESPACE}" || kubectl create namespace ${CHART_NAMESPACE}
            kubectl delete secrets elastic-certificates elastic-certificate-pem elastic-certificate-crt -n ${CHART_NAMESPACE} || true
            kubectl create secret generic elastic-certificates --from-file=elastic-certificates.p12 -n ${CHART_NAMESPACE}
            kubectl create secret generic elastic-certificate-pem --from-file=elastic-certificate.pem -n ${CHART_NAMESPACE}
            kubectl create secret generic elastic-certificate-crt --from-file=elastic-certificate.crt -n ${CHART_NAMESPACE}   
            docker rm -f elastic-helm-charts-certs
            rm -f elastic-certificates.p12 elastic-certificate.pem elastic-certificate.crt elastic-stack-ca.p12
      - run:
          name: Install chart
          command: |
            helm dependency update ./mifos-payment-hub/helm/g2p-sandbox
            helm upgrade -f ./mifos-payment-hub/helm/g2p-sandbox/values.yaml -f ./mifos-payment-hub/helm/g2p-sandbox/values-sandbox.yaml --set fin-engine.namespace=${CHART_NAMESPACE} g2pconnect ./mifos-payment-hub/helm/g2p-sandbox --install --create-namespace -n ${CHART_NAMESPACE}
      - run:
          name: Fix Operation app DATABASE
          command: |
            REPLICAS=$(kubectl describe deployments ph-ee-operations-app -n ${CHART_NAMESPACE} | grep desired | awk '{print $2}')
            kubectl scale deployment ph-ee-operations-app --replicas=0 -n ${CHART_NAMESPACE}
            root_pass=$(kubectl get secret operationsmysql -o jsonpath='{.data.mysql-root-password}' -n ${CHART_NAMESPACE} | base64 --decode)
            kubectl rollout status --watch --timeout=180s statefulset/operationsmysql -n ${CHART_NAMESPACE} 
            sleep 60
            fix_ops_db() {
              kubectl scale deployment ph-ee-operations-app --replicas=0 -n ${CHART_NAMESPACE}
              kubectl exec -n ${CHART_NAMESPACE} -it operationsmysql-0 -- /bin/bash -c "mysql -u root -p$root_pass --execute=\"DROP DATABASE tenants;DROP DATABASE rhino;DROP DATABASE gorilla;CREATE DATABASE tenants;GRANT ALL PRIVILEGES ON tenants.* TO 'mifos';CREATE DATABASE rhino;CREATE DATABASE gorilla;GRANT ALL PRIVILEGES ON rhino.* TO 'mifos';GRANT ALL PRIVILEGES ON gorilla.* TO 'mifos';GRANT ALL ON *.* TO 'root'@'%';\" -vvv"
              kubectl scale deployment ph-ee-operations-app --replicas=$REPLICAS -n ${CHART_NAMESPACE}
            }
            fix_ops_db
            if ! kubectl wait deployment -n ${CHART_NAMESPACE} ph-ee-operations-app --for condition=Available=True --timeout=180s; then
              echo "Retry Fix Operation app DATABASE"
              fix_ops_db
              kubectl wait deployment -n ${CHART_NAMESPACE} ph-ee-operations-app --for condition=Available=True --timeout=180s
            fi
      - run:
          name: Migrating Tenants
          command: |
            sleep 180
            kubectl delete pods -n ${CHART_NAMESPACE} $(kubectl get pods -n ${CHART_NAMESPACE} | grep fineract-server | awk '{print $1}')
            echo "Sleep after pod restart"
            sleep 180
      - run: 
          name: Deploy BPMNs
          command: |
            kubectl wait deployment -n ${CHART_NAMESPACE} ph-ee-zeebe-ops --for condition=Available=True --timeout=90s
            kubectl -n ${CHART_NAMESPACE} port-forward service/ph-ee-zeebe-ops 15200:80 & sleep 5
            for bpmn in ./mifos-payment-hub/bpmn/*.bpmn; do
              echo "processing bpmn: $(basename $bpmn)"
              curl --location 'http://127.0.0.1:15200/zeebe/upload' --form "file=@$bpmn"
            done
            pkill kubectl
  test-deployed-payment-hub-and-fineract:
    docker:
      - image: cimg/aws:2023.03
    steps:
      - checkout
      - aws-cli/setup:
          role-arn: 'arn:aws:iam::463471358064:role/CICDPipeline_sandbox-bb-payments_Role_dev'
          aws-region: AWS_DEFAULT_REGION
          profile-name: CICDPipeline_sandbox-bb-payments_Role_dev
          role-session-name: CircleSession
          session-duration: '1800'
      - aws-eks/update-kubeconfig-with-authenticator:
          aws-region: "${AWS_DEFAULT_REGION}"
          cluster-name: "${AWS_CLUSTER_NAME}"
          cluster-authentication-role-arn: arn:aws:iam::463471358064:role/CICDPipeline_sandbox-bb-payments_Role_dev
      - run:
          name: Validate deployments
          command: |
            echo "Validate deployments"
            kubectl rollout status --watch --timeout=60s deployment/fineract-server -n ${CHART_NAMESPACE}
            kubectl rollout status --watch --timeout=60s deployment/kafka -n ${CHART_NAMESPACE}           
            kubectl rollout status --watch --timeout=60s deployment/message-gateway -n ${CHART_NAMESPACE}
            kubectl rollout status --watch --timeout=60s deployment/mifos-community -n ${CHART_NAMESPACE}
            kubectl rollout status --watch --timeout=60s deployment/ph-ee-connector-ams-mifos -n ${CHART_NAMESPACE}
            kubectl rollout status --watch --timeout=60s deployment/ph-ee-connector-bulk -n ${CHART_NAMESPACE}
            kubectl rollout status --watch --timeout=60s deployment/ph-ee-connector-channel -n ${CHART_NAMESPACE}
            kubectl rollout status --watch --timeout=60s deployment/ph-ee-connector-gsma -n ${CHART_NAMESPACE}
            kubectl rollout status --watch --timeout=60s deployment/ph-ee-importer-es -n ${CHART_NAMESPACE}
            kubectl rollout status --watch --timeout=60s deployment/ph-ee-importer-rdbms -n ${CHART_NAMESPACE}
            kubectl rollout status --watch --timeout=60s deployment/ph-ee-kibana -n ${CHART_NAMESPACE}
            kubectl rollout status --watch --timeout=60s deployment/ph-ee-operations-app -n ${CHART_NAMESPACE}     
            kubectl rollout status --watch --timeout=60s deployment/ph-ee-operations-web -n ${CHART_NAMESPACE}
            kubectl rollout status --watch --timeout=60s deployment/ph-ee-zeebe-ops -n ${CHART_NAMESPACE}
            kubectl rollout status --watch --timeout=60s deployment/zeebe-operate -n ${CHART_NAMESPACE}
            kubectl rollout status --watch --timeout=60s deployment/zeebe-zeebe-gateway -n ${CHART_NAMESPACE}
            echo "Validate statefulsets"
            kubectl rollout status --watch --timeout=60s statefulset/fineract-mysql -n ${CHART_NAMESPACE}
            kubectl rollout status --watch --timeout=60s statefulset/operationsmysql -n ${CHART_NAMESPACE}
            kubectl rollout status --watch --timeout=60s statefulset/ph-ee-elasticsearch -n ${CHART_NAMESPACE}
            kubectl rollout status --watch --timeout=60s statefulset/zeebe-zeebe -n ${CHART_NAMESPACE}
      - run:
          name: Validate Operations APP Api Endpoint
          command: |
            echo "Validate Operations APP Endpoint"
            kubectl -n ${CHART_NAMESPACE} port-forward service/ph-ee-operations-app 15000:80 & sleep 5
            op_app_response=$(curl -w "<->%{http_code}" --location 'http://127.0.0.1:15000/oauth/token_key')
            op_app_response_code=$(echo $op_app_response | awk -F"<->" '{print $2}')
            if [ "$op_app_response_code" != "200" ]; then
              echo "Operations APP Endpoint test failed!"
              exit 1
            fi
            pkill kubectl
      - run:
          name: Validate Fineract Server Api Endpoint
          command: |
            echo "Validate Fineract Server Endpoint"
            kubectl wait deployment -n ${CHART_NAMESPACE} fineract-server --for condition=Available=True --timeout=180s
            pod_name=$(kubectl get pods --selector=app=fineract-server -n ${CHART_NAMESPACE} -o jsonpath="{.items[0].metadata.name}")
            kubectl -n ${CHART_NAMESPACE} port-forward pod/$pod_name 15100:8443 & sleep 5
            echo "Testing Fineract Server Endpoint"
            fineract_server_response=$(curl -w " %{http_code}" --location 'https://127.0.0.1:15100/fineract-provider/actuator/health' -k)
            fineract_server_response_code=$(echo $fineract_server_response | awk '{print $2}')
            fineract_server_response_body=$(echo $fineract_server_response | awk '{print $1}')
            if [ "$fineract_server_response_code" != "200" ] || [ "$fineract_server_response_body" != "{\"status\":\"UP\",\"groups\":[\"liveness\",\"readiness\"]}" ]; then
              echo "Fineract Server Endpoint test failed!"
              exit 1
            fi
            pkill kubectl
      - run:
          name: Validate Message Gateway Api Endpoint
          command: |
            echo "Validate Message Gateway Api Endpoint"
            kubectl -n ${CHART_NAMESPACE} port-forward service/message-gateway 15000:80 & sleep 5
            response=$(curl -w "<->%{http_code}" --location 'http://127.0.0.1:15000/actuator/health/liveness')
            response_code=$(echo $response | awk -F"<->" '{print $2}')
            response_body=$(echo $response | awk -F"<->" '{print $1}')
            if [ "$response_code" != "200" ] || [ "$response_body" != "{\"status\":\"UP\"}" ]; then
              echo "Message Gateway Api Endpoint test failed!"
              exit 1
            fi
            pkill kubectl
      - run:
          name: Validate Bulk connector Api Endpoint
          command: |
            echo "Validate Bulk connector Api Endpoint"
            kubectl -n ${CHART_NAMESPACE} port-forward service/ph-ee-connector-bulk 15000:80 & sleep 5
            response=$(curl -w "<->%{http_code}" --location 'http://127.0.0.1:15000')
            response_code=$(echo $response | awk -F"<->" '{print $2}')
            if [ "$response_code" != "200" ]; then
              echo "Bulk connector Api Endpoint test failed!"
              exit 1
            fi
            pkill kubectl
      - run:
          name: Validate Channel connector Api Endpoint
          command: |
            echo "Validate Channel connector Api Endpoint"
            kubectl -n ${CHART_NAMESPACE} port-forward service/ph-ee-connector-channel 15000:80 & sleep 5
            response=$(curl -w "<->%{http_code}" --location 'http://127.0.0.1:15000/actuator/health/liveness')
            response_code=$(echo $response | awk -F"<->" '{print $2}')
            response_body=$(echo $response | awk -F"<->" '{print $1}')
            if [ "$response_code" != "200" ] || [ "$response_body" != "{\"status\":\"UP\"}" ]; then
              echo "Channel connector Api Endpoint test failed!"
              exit 1
            fi
            response=$(curl -w "<->%{http_code}" --location 'http://127.0.0.1:15000/actuator/health/readiness')
            response_code=$(echo $response | awk -F"<->" '{print $2}')
            response_body=$(echo $response | awk -F"<->" '{print $1}')
            if [ "$response_code" != "200" ] || [ "$response_body" != "{\"status\":\"UP\"}" ]; then
              echo "Channel connector Api Endpoint test failed!"
              exit 1
            fi
            pkill kubectl
      - run:
          name: Validate GSMA Connector Api Endpoint
          command: |
            echo "Validate GSMA Connector Api Endpoint"
            kubectl -n ${CHART_NAMESPACE} port-forward service/ph-ee-connector-gsma 15000:80 & sleep 5
            response=$(curl -w "<->%{http_code}" --location 'http://127.0.0.1:15000')
            response_code=$(echo $response | awk -F"<->" '{print $2}')
            response_body=$(echo $response | awk -F"<->" '{print $1}')
            if [ "$response_code" != "200" ] || [ "$response_body" != "GET Good" ]; then
              echo "GSMA Connector Api Endpoint test failed!"
              exit 1
            fi
            pkill kubectl
  deploy-emulator:
    docker:
      - image: cimg/openjdk:17.0.7
    steps:
      - checkout
      - run:
          name: Set environment variables
          command: |
            echo 'export IMAGE_VERSION=$(cat ./emulator/implementation/build.gradle | grep "version =" | sed "s/version = '\''\([^'\'']*\)'\''/\1/")' >> $BASH_ENV
            echo 'export ECR_REGISTRY=bb/payments/emulator/backend' >> $BASH_ENV
            echo 'export DOCKER_IMAGE=${ECR_REGISTRY}:${IMAGE_VERSION}' >> $BASH_ENV
            source $BASH_ENV
      - run:
          name: Build Docker image
          command: |
            cd ./emulator/implementation
            ./gradlew bootBuildImage --imageName=${DOCKER_IMAGE}
      - aws-cli/setup:
          role-arn: 'arn:aws:iam::463471358064:role/CICDPipeline_sandbox-bb-payments_Role_dev'
          aws-region: AWS_DEFAULT_REGION
          profile-name: CICDPipeline_sandbox-bb-payments_Role_dev
          role-session-name: CircleSession
          session-duration: '1800'
      - run:
          name: Docker login
          command: |
            aws ecr get-login-password --region ap-south-1 | docker login --username AWS --password-stdin 419830066942.dkr.ecr.ap-south-1.amazonaws.com
            docker tag ${DOCKER_IMAGE} 463471358064.dkr.ecr.eu-central-1.amazonaws.com/${DOCKER_IMAGE}
            docker push 463471358064.dkr.ecr.eu-central-1.amazonaws.com/${DOCKER_IMAGE}

parameters:
  deploy_allowed:
    type: boolean
    default: false
  test_allowed:
    type: boolean
    default: false
  emulator_deploy_allowed:
    type: boolean
    default: false      

workflows:
  Emulator Deployment:
    when: << pipeline.parameters.emulator_deploy_allowed >>
    jobs:
      - hold:
          type: approval
      - deploy-emulator:
          context: aws
          requires:
            - hold
  Test Deployment:
    when: << pipeline.parameters.test_allowed >>
    jobs:
      - hold:
          type: approval
      - test-deployed-payment-hub-and-fineract:
          context: aws
          requires:
            - hold
  Deloy PaymentHub and Fineract to EKS cluster:
    when: << pipeline.parameters.deploy_allowed >>
    jobs:
      - hold:
          type: approval
      - deploy-payment-hub-and-fineract:
          context: aws
          requires:
            - hold
      - test-deployed-payment-hub-and-fineract:
          context: aws
          requires:
            - deploy-payment-hub-and-fineract

