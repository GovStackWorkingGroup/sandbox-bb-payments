version: 2.1
orbs:
  aws-cli: circleci/aws-cli@3.1.4
  aws-ecr: circleci/aws-ecr@8.2.1
  aws-eks: circleci/aws-eks@2.2.0
  helm: circleci/helm@1.0
  kubernetes: circleci/kubernetes@1.3.1
jobs:
  deploy-payment-hub-and-fineract:
    docker:
      - image: cimg/aws:2023.03
    steps:
      - checkout
      - setup_remote_docker:
          version: 20.10.14
      - aws-cli/setup:
          role-arn: 'arn:aws:iam::463471358064:role/CICDPipeline_sandbox-bb-payments_Role_dev'
          aws-region: AWS_DEFAULT_REGION
          profile-name: CICDPipeline_sandbox-bb-payments_Role_dev
          role-session-name: CircleSession
          session-duration: '1800'
      - aws-eks/update-kubeconfig-with-authenticator:
          aws-region: "${AWS_DEFAULT_REGION}"
          cluster-name: "${AWS_CLUSTER_NAME}"
          cluster-authentication-role-arn: arn:aws:iam::463471358064:role/CICDPipeline_sandbox-bb-payments_Role_dev
      - helm/install-helm-client:
          version: v3.2.0
      - run:
          name: Create Elasticsearch Certificates
          command: |
            docker pull docker.elastic.co/elasticsearch/elasticsearch:7.16.3
            docker run --name elastic-helm-charts-certs -i -w /app \
              docker.elastic.co/elasticsearch/elasticsearch:7.16.3 \
              /bin/sh -c " \
                elasticsearch-certutil ca --out /app/elastic-stack-ca.p12 --pass '' && \
                elasticsearch-certutil cert --name security-master --dns security-master --ca /app/elastic-stack-ca.p12 --pass '' --ca-pass '' --out /app/elastic-certificates.p12"
            docker cp elastic-helm-charts-certs:/app/elastic-certificates.p12 ./
            openssl pkcs12 -nodes -passin pass:'' -in elastic-certificates.p12 -out elastic-certificate.pem
            openssl x509 -outform der -in elastic-certificate.pem -out elastic-certificate.crt
            kubectl get namespace | grep -q "^${CHART_NAMESPACE}" || kubectl create namespace ${CHART_NAMESPACE}
            kubectl delete secrets elastic-certificates elastic-certificate-pem elastic-certificate-crt -n ${CHART_NAMESPACE} || true
            kubectl create secret generic elastic-certificates --from-file=elastic-certificates.p12 -n ${CHART_NAMESPACE}
            kubectl create secret generic elastic-certificate-pem --from-file=elastic-certificate.pem -n ${CHART_NAMESPACE}
            kubectl create secret generic elastic-certificate-crt --from-file=elastic-certificate.crt -n ${CHART_NAMESPACE}   
            docker rm -f elastic-helm-charts-certs
            rm -f elastic-certificates.p12 elastic-certificate.pem elastic-certificate.crt elastic-stack-ca.p12
      - run:
          name: Install chart
          command: |
            helm dependency update ./mifos-payment-hub/helm/g2p-sandbox
            helm upgrade -f ./mifos-payment-hub/helm/g2p-sandbox/values.yaml -f ./mifos-payment-hub/helm/g2p-sandbox/values-sandbox.yaml --set fin-engine.namespace=${CHART_NAMESPACE} g2pconnect ./mifos-payment-hub/helm/g2p-sandbox --install --create-namespace -n ${CHART_NAMESPACE}
      - run:
          name: Fix Operation app DATABASE
          command: |
            REPLICAS=$(kubectl describe deployments ph-ee-operations-app -n ${CHART_NAMESPACE} | grep desired | awk '{print $2}')
            kubectl scale deployment ph-ee-operations-app --replicas=0 -n ${CHART_NAMESPACE}
            sudo apt-get update
            sudo apt-get install -y mysql-client
            root_pass=$(kubectl get secret operationsmysql -o jsonpath='{.data.mysql-root-password}' -n ${CHART_NAMESPACE} | base64 --decode)
            kubectl rollout status --watch --timeout=180s statefulset/operationsmysql -n ${CHART_NAMESPACE} 
            sleep 60
            kubectl -n ${CHART_NAMESPACE} port-forward service/operationsmysql 15300:3306 & sleep 5
            fix_ops_db() {
              kubectl scale deployment ph-ee-operations-app --replicas=0 -n ${CHART_NAMESPACE}
              mysql -h 127.0.0.1 -P 15300 -u root -p$root_pass --execute="DROP DATABASE tenants;DROP DATABASE rhino;DROP DATABASE gorilla;CREATE DATABASE tenants;GRANT ALL PRIVILEGES ON tenants.* TO 'mifos';CREATE DATABASE rhino;CREATE DATABASE gorilla;GRANT ALL PRIVILEGES ON rhino.* TO 'mifos';GRANT ALL PRIVILEGES ON gorilla.* TO 'mifos';GRANT ALL ON *.* TO 'root'@'%';" -vvv
              kubectl scale deployment ph-ee-operations-app --replicas=$REPLICAS -n ${CHART_NAMESPACE}
            }
            fix_ops_db
            if ! kubectl wait deployment -n ${CHART_NAMESPACE} ph-ee-operations-app --for condition=Available=True --timeout=180s; then
              echo "Retry Fix Operation app DATABASE"
              fix_ops_db
              kubectl wait deployment -n ${CHART_NAMESPACE} ph-ee-operations-app --for condition=Available=True --timeout=180s
            fi
      - run:
          name: Migrating Tenants
          command: |
            sleep 180
            kubectl delete pods -n ${CHART_NAMESPACE} $(kubectl get pods -n ${CHART_NAMESPACE} | grep fineract-server | awk '{print $1}')
      - run: 
          name: Deploy BPMNs
          command: |
            kubectl wait deployment -n ${CHART_NAMESPACE} ph-ee-zeebe-ops --for condition=Available=True --timeout=90s
            kubectl -n ${CHART_NAMESPACE} port-forward service/ph-ee-zeebe-ops 15200:80 & sleep 5
            for bpmn in ./mifos-payment-hub/bpmn/*.bpmn; do
              echo "processing bpmn: $(basename $bpmn)"
              curl --location 'http://127.0.0.1:15200/zeebe/upload' --form "file=@$bpmn"
            done
            ps -ef | grep port-forward | grep -v grep | awk '{print $2}' | xargs kill -9
  test-deployed-payment-hub-and-fineract:
    docker:
      - image: cimg/aws:2023.03
    steps:
      - checkout
      - aws-cli/setup:
          role-arn: 'arn:aws:iam::463471358064:role/CICDPipeline_sandbox-bb-payments_Role_dev'
          aws-region: AWS_DEFAULT_REGION
          profile-name: CICDPipeline_sandbox-bb-payments_Role_dev
          role-session-name: CircleSession
          session-duration: '1800'
      - aws-eks/update-kubeconfig-with-authenticator:
          aws-region: "${AWS_DEFAULT_REGION}"
          cluster-name: "${AWS_CLUSTER_NAME}"
          cluster-authentication-role-arn: arn:aws:iam::463471358064:role/CICDPipeline_sandbox-bb-payments_Role_dev
      - helm/install-helm-client:
          version: v3.2.0
      - run:
          name: Validate deployments
          command: |
            echo "Validate deployments"
            kubectl rollout status --watch --timeout=60s deployment/ph-ee-operations-app -n ${CHART_NAMESPACE}
            echo "Validate statefulsets"
            kubectl rollout status --watch --timeout=60s statefulset/operationsmysql -n ${CHART_NAMESPACE}
      - run:
          name: Validate Api Endpoints
          command: |
            kubectl -n ${CHART_NAMESPACE} port-forward service/fineract-server 15200:8443 & sleep 5
            curl -w "\n%{http_code}" --location 'https://127.0.0.1:15200/fineract-provider/actuator/health' -k
            fineract_server_response=$(curl -w "\n%{http_code}" --location 'https://127.0.0.1:15200/fineract-provider/actuator/health' -k)
            fineract_server_response_code=$(echo $fineract_server_response | sed -n 2p)
            fineract_server_response_body=$(echo $fineract_server_response | sed -n 1p)
            echo $fineract_server_response_code
            echo $fineract_server_response_body
            if [ "$fineract_server_response_code" != "200" ]; then
              echo "Endpoint test failed!"
              exit 1
            fi
            
parameters:
  deploy_allowed:
    type: boolean
    default: false
  test_allowed:
    type: boolean
    default: false

workflows:
  Test Deployment:
    when: << pipeline.parameters.test_allowed >>
    jobs:
      - hold:
          type: approval
      - test-deployed-payment-hub-and-fineract:
          context: aws
          requires:
            - hold
  Deloy PaymentHub and Fineract to EKS cluster:
    when: << pipeline.parameters.deploy_allowed >>
    jobs:
      - hold:
          type: approval
      - deploy-payment-hub-and-fineract:
          context: aws
          requires:
            - hold
      - test-deployed-payment-hub-and-fineract:
          context: aws
          requires:
            - deploy-payment-hub-and-fineract

